<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>二分搜尋法</title>
    <url>/asddzxcc1857.github.io/2022/01/30/Binary_Search%20%E4%BA%8C%E5%88%86%E6%90%9C%E5%B0%8B%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Binary-Search-二分搜尋法"><a href="#Binary-Search-二分搜尋法" class="headerlink" title="Binary_Search 二分搜尋法"></a>Binary_Search 二分搜尋法</h1><span id="more"></span>

<p><strong>教材</strong></p>
<hr>
<h2 id="想法突破"><a href="#想法突破" class="headerlink" title="想法突破"></a>想法突破</h2><div class="note [success] [no-icon]">
            <p>在一堆資料(共N筆)中搜尋其中一筆資料<br>method(1)<br>(1)直接將從頭到尾搜尋一遍</p><p>發現如果最快當然是1次就找到，但是最慢需要跑完全部才能找到。<br>估算複雜度O(N)</p>
          </div>

<p><strong>有點太慢!!改良一下方法</strong></p>
<div class="note [success] [no-icon]">
            <p>method(2)<br>先將他們排序後可以產生一個特性(從小到大)使得</p><p>(1)如果[中間的值比較大]就一定是在[左邊]<br>(2)如果[中間的值比較小]就一定是在[右邊]<br>(3)如果相同就是找到了</p>
          </div>

<div class="note [success] [no-icon]">
            <p>簡略證明:<br>令 n 為次數 N 為資料筆數<br>因為每次都切一半所以可以算是<br>=&gt; 2^n^ &gt; N<br>=&gt; n &gt; log<del>2</del>N<br>估算複雜度O(logN)</p>
          </div>

<hr>
<h2 id="演算法模板-遞迴版本"><a href="#演算法模板-遞迴版本" class="headerlink" title="演算法模板(遞迴版本)"></a>演算法模板(遞迴版本)</h2><p><img src="https://i.imgur.com/XXudNZc.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> b[],<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=R)</span><br><span class="line">	&#123;</span><br><span class="line">	    <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">	    <span class="keyword">if</span>(b[mid] == val) </span><br><span class="line">	        <span class="keyword">return</span> mid; </span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> (b[mid] &gt; val) </span><br><span class="line">	    	<span class="keyword">return</span> <span class="built_in">binary_search</span>(b,L,mid - <span class="number">1</span>,val); </span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> (b[mid] &lt; val) </span><br><span class="line">	    	<span class="keyword">return</span> <span class="built_in">binary_search</span>(b,mid + <span class="number">1</span>,R,val); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>時間複雜度 O(logN)</strong></p>
<hr>
<h2 id="演算法模板-迴圈版本"><a href="#演算法模板-迴圈版本" class="headerlink" title="演算法模板(迴圈版本)"></a>演算法模板(迴圈版本)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> b[],<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(L&lt;=R)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(b[mid] == val)</span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b[mid] &gt; val)</span><br><span class="line">			R = mid - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b[mid] &lt; val)</span><br><span class="line">			L = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>時間複雜度 O(logN)</strong></p>
<hr>
<h2 id="使用範例-遞迴"><a href="#使用範例-遞迴" class="headerlink" title="使用範例 遞迴"></a>使用範例 遞迴</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> b[],<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span> <span class="comment">// (要搜尋的陣列,左界,右界,要搜尋的值)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=R)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>; <span class="comment">// 先找出中間的位置 </span></span><br><span class="line">		<span class="keyword">if</span>(b[mid] == val) <span class="comment">// 如果 (相等) 就回傳位置 </span></span><br><span class="line">			<span class="keyword">return</span> mid; </span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b[mid] &gt; val) <span class="comment">// 如果 (中間位置的值 &gt; 要找的值) 代表 要找的值在中間值的左邊  </span></span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">binary_search</span>(b,L,mid - <span class="number">1</span>,val); <span class="comment">//不需要mid =&gt; 找(左,中-1)</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b[mid] &lt; val) <span class="comment">// 如果 (中間位置的值 &lt; 要找的值) 代表 要找的值在中間值的右邊  </span></span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">binary_search</span>(b,mid + <span class="number">1</span>,R,val); <span class="comment">//不需要mid =&gt; 找(中+1,右)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">89</span>,<span class="number">71</span>,<span class="number">54</span>,<span class="number">65</span>,<span class="number">75</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">46</span>&#125;; <span class="comment">//宣告一個未排序的陣列 </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;索引值          0  1  2  3  4  5  6  7  8  9\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;排序前陣列 c : &quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">		cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; c[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">sort</span>(c,c+<span class="number">10</span>); <span class="comment">// 排序:小到大 </span></span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;排序後陣列 c : &quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">		cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; c[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> loc = <span class="built_in">binary_search</span>(c,<span class="number">0</span>,<span class="number">9</span>,<span class="number">71</span>); <span class="comment">// 找出 71 在排序後陣列中的位置 </span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;71 在排序後 c 陣列的&quot;</span> &lt;&lt; loc + <span class="number">1</span> &lt;&lt; <span class="string">&quot;位置&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 回傳為陣列 index 所以要 + 1 才是位置 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">索引值          0  1  2  3  4  5  6  7  8  9</span></span><br><span class="line"><span class="comment">排序前陣列 c :  1  5 89 71 54 65 75 13 29 46</span></span><br><span class="line"><span class="comment">排序後陣列 c :  1  5 13 29 46 54 65 71 75 89</span></span><br><span class="line"><span class="comment">71 在排序後 c 陣列的8位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用範例-迴圈"><a href="#使用範例-迴圈" class="headerlink" title="使用範例 迴圈"></a>使用範例 迴圈</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> b[],<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span> <span class="comment">// (要搜尋的陣列,左界,右界,要搜尋的值)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> mid;</span><br><span class="line">	<span class="keyword">while</span>(L&lt;=R)</span><br><span class="line">	&#123;</span><br><span class="line">		mid = (L + R) / <span class="number">2</span>; <span class="comment">// 先找出中間的位置 </span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(b[mid] == val) <span class="comment">// 如果 (相等) 就回傳位置 </span></span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b[mid] &gt; val) <span class="comment">// 如果 (中間位置的值 &gt; 要找的值) 代表 要找的值在中間值的左邊  </span></span><br><span class="line">			R = mid - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b[mid] &lt; val) <span class="comment">// 如果 (中間位置的值 &lt; 要找的值) 代表 要找的值在中間值的右邊  </span></span><br><span class="line">			L = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">89</span>,<span class="number">71</span>,<span class="number">54</span>,<span class="number">65</span>,<span class="number">75</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">46</span>&#125;; <span class="comment">//宣告一個未排序的陣列 </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;索引值          0  1  2  3  4  5  6  7  8  9\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;排序前陣列 c : &quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">		cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; c[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">sort</span>(c,c+<span class="number">10</span>); <span class="comment">// 排序:小到大 </span></span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;排序後陣列 c : &quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">		cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; c[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> loc = <span class="built_in">binary_search</span>(c,<span class="number">0</span>,<span class="number">9</span>,<span class="number">71</span>); <span class="comment">// 找出 71 在排序後陣列中的位置 </span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;71 在排序後 c 陣列的&quot;</span> &lt;&lt; loc + <span class="number">1</span> &lt;&lt; <span class="string">&quot;位置&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 回傳為陣列 index 所以要 + 1 才是位置 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">索引值          0  1  2  3  4  5  6  7  8  9</span></span><br><span class="line"><span class="comment">排序前陣列 c :  1  5 89 71 54 65 75 13 29 46</span></span><br><span class="line"><span class="comment">排序後陣列 c :  1  5 13 29 46 54 65 71 75 89</span></span><br><span class="line"><span class="comment">71 在排序後 c 陣列的8位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="練習題"><a href="#練習題" class="headerlink" title="練習題"></a>練習題</h2><p><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d732">zerojudge d732</a></strong></p>
<p><strong><a href="https://zerojudge.tw/ShowProblem?problemid=f815">zerojudge f815</a></strong></p>
<p><strong><a href="https://drive.google.com/file/d/1Pw31p1mnus6H2R_LPe7xXiFk7F3shz7F/view">f815題目pdf</a></strong></p>
]]></content>
      <categories>
        <category>程式競賽</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>searching</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ STL</title>
    <url>/asddzxcc1857.github.io/2022/01/30/STL/</url>
    <content><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><span id="more"></span>

<p><strong>教材</strong></p>
<p><strong>Vector,List,Deque,Stack,Queue,Priority_queue,Map,Set</strong></p>
<hr>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="製作進度"><a href="#製作進度" class="headerlink" title="製作進度"></a>製作進度</h3><div class="note success">
            <p>2021/12/04 Map函式介紹、題目</p>
          </div>

<h3 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h3><h4 id="結構的長相"><a href="#結構的長相" class="headerlink" title="結構的長相"></a>結構的長相</h4><p><img src="https://i.imgur.com/rlkl8bA.png"></p>
<h4 id="排序的長相"><a href="#排序的長相" class="headerlink" title="排序的長相"></a>排序的長相</h4><p><img src="https://i.imgur.com/aGCix2u.png"></p>
<h4 id="Map-簡介"><a href="#Map-簡介" class="headerlink" title="Map 簡介"></a>Map 簡介</h4><div class="note primary">
            <p>Map 是 C++ 標準程式庫中的一個 class，為眾多容器（container）之一。它提供搜尋和插入友善的資料結構，並具有一對一 mapping 功能：</p><p>第一個稱為關鍵字 (key)，每個關鍵字只能在 map 中出現一次。<br>第二個稱為該關鍵字的值 (value)。</p>
          </div>

<h4 id="Map-的特色"><a href="#Map-的特色" class="headerlink" title="Map 的特色"></a>Map 的特色</h4><div class="note primary">
            <p>1.map 內部資料結構為一顆紅黑樹 (red-black tree)。<br>2.內部是有排序的資料。<br>3.對於搜尋和插入操作友善( O(logn) )。<br>4.可以修改 value 值、不能修改 key 值。<br>5.以模板（泛型）方式實現，可以儲存任意類型的變數，包括使用者自定義的資料型態。</p>
          </div>
<h4 id="宣告方式"><a href="#宣告方式" class="headerlink" title="宣告方式"></a>宣告方式</h4><div class="note success">
            <p>宣告方式 map&lt; Key_Type , Value_Type &gt; Name</p>
          </div>

<h3 id="最常使用的函式"><a href="#最常使用的函式" class="headerlink" title="最常使用的函式"></a>最常使用的函式</h3><table>
<thead>
<tr>
<th>map</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>m.begin()</td>
<td>回傳指著起始位置的iterator</td>
</tr>
<tr>
<td>m.end()</td>
<td>回傳指著最終位置的後面的iterator</td>
</tr>
<tr>
<td>m .at(key)</td>
<td>回傳key的value/賦予key的value</td>
</tr>
<tr>
<td>m.size()</td>
<td>回傳map當前的key數量</td>
</tr>
<tr>
<td>m.count(key)</td>
<td>回傳map當前是否有某個key</td>
</tr>
<tr>
<td>m.empalce(key,value)</td>
<td>插入一個值到map</td>
</tr>
<tr>
<td>m.erase(key)</td>
<td>刪除key</td>
</tr>
<tr>
<td>m.erase(iterator)</td>
<td>刪除iterator指的位置</td>
</tr>
<tr>
<td>m.erase(first iterator,last iterator)</td>
<td>刪除iterator指的範圍(不包含last)</td>
</tr>
<tr>
<td>m.empty()</td>
<td>回傳map是否為空</td>
</tr>
<tr>
<td>m.swap(other map)</td>
<td>交換兩個map的內容</td>
</tr>
<tr>
<td>m.lower_bound(key)</td>
<td>回傳第一個大於等於key的iterator</td>
</tr>
<tr>
<td>m.upper_bound(key)</td>
<td>回傳第一個大於key的iterator</td>
</tr>
<tr>
<td>m.insert(pair&lt;type,type&gt;(key,value))</td>
<td>插入一個值到map</td>
</tr>
<tr>
<td>m.insert(iterator,pair&lt;type,type&gt;(key,value))</td>
<td>插入一個值到map</td>
</tr>
<tr>
<td>m.insert(other map first iterator,other map last iterator)</td>
<td>插入一個值到map</td>
</tr>
<tr>
<td>m.find(key)</td>
<td>回傳搜尋一個key值的iterator</td>
</tr>
<tr>
<td>m.equal_range(key)</td>
<td>回傳大於等於和大於兩個的iterator</td>
</tr>
<tr>
<td>m.key_comp(other map)</td>
<td>比較兩個map的key值</td>
</tr>
</tbody></table>
<hr>
<h4 id="begin-end"><a href="#begin-end" class="headerlink" title="begin/end"></a>begin/end</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::begin/end</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">&#x27;b&#x27;</span>] = <span class="number">100</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;a&#x27;</span>] = <span class="number">200</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;c&#x27;</span>] = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// show content:</span></span><br><span class="line">  <span class="keyword">for</span> (map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.<span class="built_in">begin</span>(); it!=mymap.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>a =&gt; 200<br>b =&gt; 100<br>c =&gt; 300</p>
          </div>

<hr>
<h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::at</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;string,<span class="keyword">int</span>&gt; mymap = &#123;</span><br><span class="line">                &#123; <span class="string">&quot;alpha&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;beta&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;gamma&quot;</span>, <span class="number">0</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line">  mymap.<span class="built_in">at</span>(<span class="string">&quot;alpha&quot;</span>) = <span class="number">10</span>;</span><br><span class="line">  mymap.<span class="built_in">at</span>(<span class="string">&quot;beta&quot;</span>) = <span class="number">20</span>;</span><br><span class="line">  mymap.<span class="built_in">at</span>(<span class="string">&quot;gamma&quot;</span>) = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: mymap) &#123;</span><br><span class="line">    cout &lt;&lt; x.first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; x.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note default">
            <p>output:</p><p>alpha: 10<br>beta: 20<br>gamma: 30</p>
          </div>

<hr>
<h4 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap.<span class="built_in">emplace</span>(<span class="string">&#x27;x&#x27;</span>,<span class="number">100</span>);</span><br><span class="line">  mymap.<span class="built_in">emplace</span>(<span class="string">&#x27;y&#x27;</span>,<span class="number">200</span>);</span><br><span class="line">  mymap.<span class="built_in">emplace</span>(<span class="string">&#x27;z&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;mymap contains:&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: mymap)</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; x.first &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x.second &lt;&lt; <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note default">
            <p>output:</p><p>mymap contains: [x:100] [y:200] [z:100]</p>
          </div>

<hr>
<h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::empty</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!mymap.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; mymap.<span class="built_in">begin</span>()-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; mymap.<span class="built_in">begin</span>()-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    mymap.<span class="built_in">erase</span>(mymap.<span class="built_in">begin</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>a =&gt; 10<br>b =&gt; 20<br>c =&gt; 30</p>
          </div>

<hr>
<h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::find</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">150</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;d&#x27;</span>]=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  it = mymap.<span class="built_in">find</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (it != mymap.<span class="built_in">end</span>())</span><br><span class="line">    mymap.<span class="built_in">erase</span> (it);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;elements in mymap:&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;a =&gt; &quot;</span> &lt;&lt; mymap.<span class="built_in">find</span>(<span class="string">&#x27;a&#x27;</span>)-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;c =&gt; &quot;</span> &lt;&lt; mymap.<span class="built_in">find</span>(<span class="string">&#x27;c&#x27;</span>)-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;d =&gt; &quot;</span> &lt;&lt; mymap.<span class="built_in">find</span>(<span class="string">&#x27;d&#x27;</span>)-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>elements in mymap:<br>a =&gt; 50<br>c =&gt; 150<br>d =&gt; 200</p>
          </div>

<hr>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::insert (C++98)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// first insert function version (single parameter):</span></span><br><span class="line">  mymap.<span class="built_in">insert</span> ( pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;a&#x27;</span>,<span class="number">100</span>) );</span><br><span class="line">  mymap.<span class="built_in">insert</span> ( pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;z&#x27;</span>,<span class="number">200</span>) );</span><br><span class="line"></span><br><span class="line">  pair&lt;map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator,<span class="keyword">bool</span>&gt; ret;</span><br><span class="line">  ret = mymap.<span class="built_in">insert</span> ( pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;z&#x27;</span>,<span class="number">500</span>) );</span><br><span class="line">  <span class="keyword">if</span> (ret.second==<span class="literal">false</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;element &#x27;z&#x27; already existed&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; with a value of &quot;</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// second insert function version (with hint position):</span></span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it = mymap.<span class="built_in">begin</span>();</span><br><span class="line">  mymap.<span class="built_in">insert</span> (it, pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;b&#x27;</span>,<span class="number">300</span>));  <span class="comment">// max efficiency inserting</span></span><br><span class="line">  mymap.<span class="built_in">insert</span> (it, pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;c&#x27;</span>,<span class="number">400</span>));  <span class="comment">// no max efficiency inserting</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// third insert function version (range insertion):</span></span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; anothermap;</span><br><span class="line">  anothermap.<span class="built_in">insert</span>(mymap.<span class="built_in">begin</span>(),mymap.<span class="built_in">find</span>(<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// showing contents:</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;mymap contains:\n&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (it=mymap.<span class="built_in">begin</span>(); it!=mymap.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;anothermap contains:\n&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (it=anothermap.<span class="built_in">begin</span>(); it!=anothermap.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>element ‘z’ already existed with a value of 200<br>mymap contains:<br>a =&gt; 100<br>b =&gt; 300<br>c =&gt; 400<br>z =&gt; 200<br>anothermap contains:<br>a =&gt; 100<br>b =&gt; 300</p>
          </div>

<hr>
<h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">101</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">202</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">302</span>;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;mymap.size() is &quot;</span> &lt;&lt; mymap.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>mymap.size() is 3</p>
          </div>

<hr>
<h4 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// erasing from map</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert some values:</span></span><br><span class="line">  mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">30</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;d&#x27;</span>]=<span class="number">40</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;e&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;f&#x27;</span>]=<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  it=mymap.<span class="built_in">find</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">  mymap.<span class="built_in">erase</span> (it);                   <span class="comment">// erasing by iterator</span></span><br><span class="line"></span><br><span class="line">  mymap.<span class="built_in">erase</span> (<span class="string">&#x27;c&#x27;</span>);                  <span class="comment">// erasing by key</span></span><br><span class="line"></span><br><span class="line">  it=mymap.<span class="built_in">find</span> (<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">  mymap.<span class="built_in">erase</span> ( it, mymap.<span class="built_in">end</span>() );    <span class="comment">// erasing by range</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// show content:</span></span><br><span class="line">  <span class="keyword">for</span> (it=mymap.<span class="built_in">begin</span>(); it!=mymap.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>a =&gt; 10<br>d =&gt; 40</p>
          </div>




<hr>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::count</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  mymap [<span class="string">&#x27;a&#x27;</span>]=<span class="number">101</span>;</span><br><span class="line">  mymap [<span class="string">&#x27;c&#x27;</span>]=<span class="number">202</span>;</span><br><span class="line">  mymap [<span class="string">&#x27;f&#x27;</span>]=<span class="number">303</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (c=<span class="string">&#x27;a&#x27;</span>; c&lt;<span class="string">&#x27;h&#x27;</span>; c++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; c;</span><br><span class="line">    <span class="keyword">if</span> (mymap.<span class="built_in">count</span>(c)&gt;<span class="number">0</span>)</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot; is an element of mymap.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot; is not an element of mymap.\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>a is an element of mymap.<br>b is not an element of mymap.<br>c is an element of mymap.<br>d is not an element of mymap.<br>e is not an element of mymap.<br>f is an element of mymap.<br>g is not an element of mymap.</p>
          </div>


<hr>
<h4 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::equal_range</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  std::pair&lt;std::map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator,std::map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator&gt; ret;</span><br><span class="line">  ret = mymap.<span class="built_in">equal_range</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;lower bound points to: &quot;</span>;</span><br><span class="line">  std::cout &lt;&lt; ret.first-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;upper bound points to: &quot;</span>;</span><br><span class="line">  std::cout &lt;&lt; ret.second-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; ret.second-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<div class="note default">
            <p>output:</p><p>lower bound points to: ‘b’ =&gt; 20<br>upper bound points to: ‘c’ =&gt; 30</p>
          </div>



<hr>
<h4 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::lower_bound/upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  std::map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator itlow,itup;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">40</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">60</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;d&#x27;</span>]=<span class="number">80</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;e&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  itlow=mymap.<span class="built_in">lower_bound</span> (<span class="string">&#x27;b&#x27;</span>);  <span class="comment">// itlow points to b</span></span><br><span class="line">  itup=mymap.<span class="built_in">upper_bound</span> (<span class="string">&#x27;d&#x27;</span>);   <span class="comment">// itup points to e (not d!)</span></span><br><span class="line"></span><br><span class="line">  mymap.<span class="built_in">erase</span>(itlow,itup);        <span class="comment">// erases [itlow,itup)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  <span class="keyword">for</span> (std::map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.<span class="built_in">begin</span>(); it!=mymap.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    std::cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<div class="note default">
            <p>output:</p><p>a =&gt; 20<br>e =&gt; 100</p>
          </div>




<hr>
<h4 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map::lower_bound/upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator itlow,itup;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">40</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">60</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;d&#x27;</span>]=<span class="number">80</span>;</span><br><span class="line">  mymap[<span class="string">&#x27;e&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  itlow=mymap.<span class="built_in">lower_bound</span> (<span class="string">&#x27;b&#x27;</span>);  <span class="comment">// itlow points to b</span></span><br><span class="line">  itup=mymap.<span class="built_in">upper_bound</span> (<span class="string">&#x27;d&#x27;</span>);   <span class="comment">// itup points to e (not d!)</span></span><br><span class="line"></span><br><span class="line">  mymap.<span class="built_in">erase</span>(itlow,itup);        <span class="comment">// erases [itlow,itup)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  <span class="keyword">for</span> (map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.<span class="built_in">begin</span>(); it!=mymap.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>a =&gt; 20<br>e =&gt; 100</p>
          </div>


<hr>
<h4 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h4><p><strong>範例程式</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// swap maps</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; foo,bar;</span><br><span class="line"></span><br><span class="line">  foo[<span class="string">&#x27;x&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">  foo[<span class="string">&#x27;y&#x27;</span>]=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  bar[<span class="string">&#x27;a&#x27;</span>]=<span class="number">11</span>;</span><br><span class="line">  bar[<span class="string">&#x27;b&#x27;</span>]=<span class="number">22</span>;</span><br><span class="line">  bar[<span class="string">&#x27;c&#x27;</span>]=<span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">  foo.<span class="built_in">swap</span>(bar);</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;foo contains:\n&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=foo.<span class="built_in">begin</span>(); it!=foo.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;bar contains:\n&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=bar.<span class="built_in">begin</span>(); it!=bar.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>output:</p><p>foo contains:<br>a =&gt; 11<br>b =&gt; 22<br>c =&gt; 33<br>bar contains:<br>x =&gt; 100<br>y =&gt; 200</p>
          </div>

<hr>
<h3 id="推薦題目"><a href="#推薦題目" class="headerlink" title="推薦題目"></a>推薦題目</h3><hr>
<h4 id="一、UVA-10226"><a href="#一、UVA-10226" class="headerlink" title="一、UVA 10226"></a>一、UVA 10226</h4><p><a href="https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=1167">UVA 10226 - Hardwood Species 難度★☆☆☆☆</a></p>
<hr>
<h4 id="二、zerojudge-a135"><a href="#二、zerojudge-a135" class="headerlink" title="二、zerojudge a135"></a>二、zerojudge a135</h4><p><a href="https://zerojudge.tw/ShowProblem?problemid=a135">zerojudge a135</a></p>
<hr>
<h4 id="三、zerojudge-e641"><a href="#三、zerojudge-e641" class="headerlink" title="三、zerojudge e641"></a>三、zerojudge e641</h4><p><a href="https://zerojudge.tw/ShowProblem?problemid=e641">zerojudge e641</a></p>
<hr>
<h4 id="四、zerojudge-d267"><a href="#四、zerojudge-d267" class="headerlink" title="四、zerojudge d267"></a>四、zerojudge d267</h4><p><a href="https://zerojudge.tw/ShowProblem?problemid=d267">zerojudge d267</a></p>
<hr>
<h4 id="五、班級排名"><a href="#五、班級排名" class="headerlink" title="五、班級排名"></a>五、班級排名</h4><div class="note success">
            <p>題目敘述:</p><p>一個班級內有 n 位學生，每位學生在段考後分數終於出爐了，大家都想要趕緊知道排名，老師最近真的太忙了，沒時間可以幫學生做排名，需要您寫一個程式來幫助老師排名</p><p>輸入:<br>第 1 行 為學生個數 n<br>第 2 行 到 第 n + 1 行<br>每一行都有一個[學生名稱]和[學生分數]</p><p>輸出:</p><p>第 1 行 到 第 n 行<br>按照學生分數由大到小，如果分數相同按照首位字母進行排序，如果首位字母相同請依照輸入先後順序排序<br>每一行都有一個[學生名稱]和[學生分數]</p><p>範例輸入:</p><p>4<br>Andy 83<br>Eric 85<br>Alley 67<br>David 70</p><p>範例輸出:</p><p>Eric 85<br>Andy 83<br>David 70<br>Alley 67</p><p>提示:<br>第一種: map＋vector<br>(請想看看能不能只用map解題)</p><p>第二種: struct</p><p>第三種: …</p>
          </div>

<hr>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><img src="https://i.imgur.com/1MCYyC5.png"></p>
<hr>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p><img src="https://i.imgur.com/0GzuhRV.png"></p>
<hr>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p><img src="https://i.imgur.com/zNvQSIB.jpg"></p>
<hr>
<h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p><img src="https://i.imgur.com/UV7j7yJ.png"></p>
<hr>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><img src="https://i.imgur.com/Yb12ZcO.png"></p>
<hr>
<h2 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h2><p><img src="https://i.imgur.com/ggIxR0w.png"></p>
<hr>
]]></content>
      <categories>
        <category>程式競賽</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>b131 NOIP2006 2.開心的金明</title>
    <url>/asddzxcc1857.github.io/2022/01/30/b131/</url>
    <content><![CDATA[<h2 id="b131"><a href="#b131" class="headerlink" title="b131"></a>b131</h2><span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m 25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 30000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[m],v[m];</span><br><span class="line"><span class="keyword">int</span> dp[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> N,M;</span><br><span class="line">	cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; M ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; M ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= N ;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(j &lt; w[i])</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i + <span class="number">1</span>][j] = dp[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				dp[i + <span class="number">1</span>][j] = <span class="built_in">max</span>(dp[i][j],dp[i][j - w[i]] + w[i] * v[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; dp[M][N] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程式競賽</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>CPE</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java HW08 Answer</title>
    <url>/asddzxcc1857.github.io/2022/04/17/java_hw07/</url>
    <content><![CDATA[<h2 id="8-9"><a href="#8-9" class="headerlink" title="8.9"></a>8.9</h2><span id="more"></span>


<h3 id="main-code"><a href="#main-code" class="headerlink" title="main code"></a>main code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> HW08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hw8_9</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SecureRandom randomNumbers = <span class="keyword">new</span> SecureRandom();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="comment">//user to enter number</span></span><br><span class="line">		Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//input the number of random numbers</span></span><br><span class="line">		<span class="comment">//user enter a number</span></span><br><span class="line">		System.out.print(<span class="string">&quot;enter a number : &quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> n = input.nextInt();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;random numbers : &quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">			System.out.println(<span class="number">10</span> + randomNumbers.nextInt(<span class="number">91</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/zmZ14ym.png"></p>
<hr>
<h2 id="8-11"><a href="#8-11" class="headerlink" title="8.11"></a>8.11</h2><h3 id="class-code"><a href="#class-code" class="headerlink" title="class code"></a>class code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> HW082;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Complex</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> realPart;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> imaginaryPart;</span><br><span class="line">	<span class="comment">//no-argument constructor</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Complex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//constructor of Complex</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Complex</span><span class="params">(<span class="keyword">double</span> realPart,<span class="keyword">double</span> imaginaryPart)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.realPart = realPart;</span><br><span class="line">		<span class="keyword">this</span>.imaginaryPart = imaginaryPart;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//addition</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Complex left)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.realPart += left.realPart;</span><br><span class="line">		<span class="keyword">this</span>.imaginaryPart += left.imaginaryPart;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//subtraction</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subtract</span><span class="params">(Complex left)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.realPart -= left.realPart;</span><br><span class="line">		<span class="keyword">this</span>.imaginaryPart -= left.imaginaryPart;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//print out</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print_out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.printf(<span class="string">&quot;(%f, %f)%n&quot;</span>,realPart,imaginaryPart);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-code-1"><a href="#main-code-1" class="headerlink" title="main code"></a>main code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> HW082;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hw8_11</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		<span class="comment">//no-argument and argument</span></span><br><span class="line">		Complex complex1 = <span class="keyword">new</span> Complex();</span><br><span class="line">		Complex complex2 = <span class="keyword">new</span> Complex(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//print out complex1 and complex2</span></span><br><span class="line">		System.out.println(<span class="string">&quot;complex1 &amp; complex2 :&quot;</span>);</span><br><span class="line">		complex1.print_out();</span><br><span class="line">		complex2.print_out();</span><br><span class="line">		<span class="comment">//addition complex1 and complex2</span></span><br><span class="line">		complex1.add(complex2);</span><br><span class="line">		<span class="comment">//print out complex1 and complex2</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after addition complex1 &amp; complex2 :&quot;</span>);</span><br><span class="line">		complex1.print_out();</span><br><span class="line">		complex2.print_out();</span><br><span class="line">		<span class="comment">//argument</span></span><br><span class="line">		Complex complex3 = <span class="keyword">new</span> Complex(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">		Complex complex4 = <span class="keyword">new</span> Complex(<span class="number">14</span>,<span class="number">2</span>);</span><br><span class="line">		<span class="comment">//print out complex3 and complex4</span></span><br><span class="line">		System.out.println(<span class="string">&quot;complex3 &amp; complex4 :&quot;</span>);</span><br><span class="line">		complex3.print_out();</span><br><span class="line">		complex4.print_out();</span><br><span class="line">		<span class="comment">//subtract complex3 and complex4</span></span><br><span class="line">		complex3.subtract(complex4);</span><br><span class="line">		<span class="comment">//print out complex3 and complex4</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after subtraction complex3 &amp; complex4 :&quot;</span>);</span><br><span class="line">		complex3.print_out();</span><br><span class="line">		complex4.print_out();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/89RpQTm.png"></p>
]]></content>
      <categories>
        <category>程式競賽</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>物件導向</tag>
        <tag>作業</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智慧 作業參考</title>
    <url>/asddzxcc1857.github.io/2022/04/17/python_AI_hw02/</url>
    <content><![CDATA[<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><span id="more"></span>


<p><img src="https://i.imgur.com/BOEslhY.jpg"></p>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>作業</tag>
        <tag>Python</tag>
        <tag>AI</tag>
        <tag>機器學習</tag>
      </tags>
  </entry>
</search>
